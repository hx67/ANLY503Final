fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE, stroke = 1),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
#Adding legends to the plot
m <- m %>%
addLegend("bottomright", pal = pal, values = ~dataf[[3]],
title = names(map_obj$dataf)[3],
opacity = 1)
return(m)
}
#Getting world map polygons
world <- map("world", fill = T, plot = F)
#Changing countries' names
trWW$country_txt <- str_replace(trWW$country_txt, "United Kingdom", "UK:Great Britain")
trWW$country_txt <- str_replace(trWW$country_txt, "United States", "USA")
trWW$country_txt <- str_replace(trWW$country_txt, "Republic of the Congo", "Republic of Congo")
trWW$country_txt <- str_replace(trWW$country_txt, "People's Republic of the Congo", "Republic of Congo")
sources <- trWW %>%
count(dbsource) %>%
transmute(Source = fct_reorder(dbsource, n), Frequency = n) %>%
arrange(desc(Frequency))
plot <- trWW %>%
count(iyear) %>%
mutate(Year = iyear, Frequency = n) %>%
ggplot(aes(Year, Frequency))+
geom_line(color = "firebrick2")+
geom_point(color = "firebrick2")+
labs(title = "Frequency of terrorist atacks by year") +
theme(legend.position = "none")
ggplotly(plot)
api_create(plot, filename = "freq-time")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(data.table)
library(countrycode) #Matching country names
library(plotly) #Interactive plots
library(viridis) #Color scales
library(tm) #Textmining for wordclouds
library(wordcloud) #Generation of wordclouds
library(leaflet) #Interactive maps
library(maps) #Maps generating
#(gganimate) #Animated plots!
#Removing non-wanted warnings from the report
options(warn=-1)
#Reading data
trWW <- as.tibble(read.csv("./data/globalterrorismdb_0718dist.csv"))
library(tidyverse)
library(data.table)
library(countrycode) #Matching country names
library(plotly) #Interactive plots
library(viridis) #Color scales
library(tm) #Textmining for wordclouds
library(wordcloud) #Generation of wordclouds
library(leaflet) #Interactive maps
library(maps) #Maps generating
#(gganimate) #Animated plots!
#Removing non-wanted warnings from the report
options(warn=-1)
#Reading data
trWW <- as.tibble(read.csv("./data/globalterrorismdb_0718dist.csv"))
leaflet_map <- function(data, map_obj){
#Merge map and data
map_obj$dataf <- left_join(data.frame(names = world$names, stringsAsFactors = F),
data,
by = c("names" = names(data)[2]))
#Creating viridis numerical color palette
pal <- if(is.numeric(map_obj$dataf[[3]])){
colorNumeric("YlOrRd",
domain = map_obj$dataf[[3]], na.color = "white")
}else{
colorFactor(brewer.pal(12, "Paired"),
domain = map_obj$dataf[[3]], na.color = "white")
}
#Generating label texts
strings <- if(ncol(map_obj$dataf) == 3){
#For a df with 3 columns (Region, Country, Variable)
sprintf(
paste("<strong>%s</strong><br/><strong>%s</strong><br/>",
names(map_obj$dataf)[3],
ifelse(is.numeric(map_obj$dataf[[3]]), ": %g ", ": %s ")),
map_obj$dataf[[1]], map_obj$dataf[[2]], map_obj$dataf[[3]])
}else if(ncol(map_obj$dataf) == 4){
#For a df with 4 columns (Region, Country, Color_Variable, Label_Variable)
sprintf(
paste("<strong>%s</strong><br/><strong>%s</strong><br/>",
names(map_obj$dataf)[3],
ifelse(is.numeric(map_obj$dataf[[3]]), ": %g ", ": %s "),
paste("<br/>",
names(map_obj$dataf)[4],
ifelse(is.numeric(map_obj$dataf[[4]]), ": %g ", ": %s "))),
map_obj$dataf[[1]], map_obj$dataf[[2]], map_obj$dataf[[3]], map_obj$dataf[[4]])
}else{
#For a df with 4 columns (Region, Country, Color_Variable, Label_Variable, Label_Variable)
sprintf(
paste("<strong>%s</strong><br/><strong>%s</strong><br/>",
names(map_obj$dataf)[3],
ifelse(is.numeric(map_obj$dataf[[3]]), ": %g ", ": %s "),
paste("<br/>",
names(map_obj$dataf)[4],
ifelse(is.numeric(map_obj$dataf[[4]]), ": %g ", ": %s ")),
paste("<br/>",
names(map_obj$dataf)[5],
ifelse(is.numeric(map_obj$dataf[[5]]), ": %g ", ": %s "))),
map_obj$dataf[[1]], map_obj$dataf[[2]], map_obj$dataf[[3]], map_obj$dataf[[4]], map_obj$dataf[[5]])
}
labels <- strings %>% lapply(htmltools::HTML)
#Creating a leaflet basic map
m <- leaflet(map_obj) %>% addTiles()
#Adding polygon with the variable
m <- m %>% addPolygons(
fillColor = ~pal(dataf[[3]]),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE, stroke = 1),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
#Adding legends to the plot
m <- m %>%
addLegend("bottomright", pal = pal, values = ~dataf[[3]],
title = names(map_obj$dataf)[3],
opacity = 1)
return(m)
}
#Getting world map polygons
world <- map("world", fill = T, plot = F)
#Changing countries' names
trWW$country_txt <- str_replace(trWW$country_txt, "United Kingdom", "UK:Great Britain")
trWW$country_txt <- str_replace(trWW$country_txt, "United States", "USA")
trWW$country_txt <- str_replace(trWW$country_txt, "Republic of the Congo", "Republic of Congo")
trWW$country_txt <- str_replace(trWW$country_txt, "People's Republic of the Congo", "Republic of Congo")
sources <- trWW %>%
count(dbsource) %>%
transmute(Source = fct_reorder(dbsource, n), Frequency = n) %>%
arrange(desc(Frequency))
plot <- trWW %>%
count(iyear) %>%
mutate(Year = iyear, Frequency = n) %>%
ggplot(aes(Year, Frequency))+
geom_line(color = "firebrick2")+
geom_point(color = "firebrick2")+
labs(title = "Frequency of terrorist atacks by year") +
theme(legend.position = "none")
ggplotly(plot)
api_create(plot, filename = "freq-time")
#Obtaining frequencies by country and merging with the world map
country_data <- trWW %>%
group_by(region_txt, country_txt) %>%
summarise(Events = n()) %>%
arrange(order(country_txt))
#Ploting the map
leaflet_map(country_data, world)
View(country_data)
View(country_data)
View(trWW)
View(trWW)
#Obtaining frequencies by country and merging with the world map
country_data <- trWW %>%
group_by(region_txt, country_txt) %>%
summarise(Events = n(), Killed=sum(nkill)) %>%
arrange(order(country_txt))
#Ploting the map
leaflet_map(country_data, world)
View(country_data)
View(country_data)
#Obtaining frequencies by country and merging with the world map
country_data <- trWW %>%
group_by(region_txt, country_txt) %>%
summarise(Events = n(), Killed=sum(nkill), Prop_value = sum(propvalue)) %>%
arrange(order(country_txt))
#Ploting the map
#leaflet_map(country_data, world)
############################################################################################
# This code in its raw form
# comes from
# https://www.r-bloggers.com/network-visualization-part-6-d3-and-r-networkd3/
# Additional Comments and code have been added by Ami Gates
# Plotting networks in R - an example how to plot a network and
# customize its appearance using networkD3 library
############################################################################################
############################################################################################
#
library(igraph)
# Read a data set.
# Data format: dataframe with 3 variables; variables 1 & 2 correspond to interactions; variable 3 is weight of interaction
edgeList <- read.csv("./Data/network_data.csv", header = TRUE)
setwd("C:/Users/hongx/Desktop/ANLY503/Final")
# Read a data set.
# Data format: dataframe with 3 variables; variables 1 & 2 correspond to interactions; variable 3 is weight of interaction
edgeList <- read.csv("./Data/network_data.csv", header = TRUE)
colnames(edgeList) <- c("X","SourceName", "TargetName", "Weight")
drops <- c("X")
edgeList = edgeList[ , !(names(edgeList) %in% drops)]
(head(edgeList))
# Create a graph. Use simplyfy to ensure that there are no duplicated edges or self loops
gD <- igraph::simplify(igraph::graph.data.frame(edgeList, directed=FALSE))
# Create a node list object (actually a data frame object) that will contain information about nodes
nodeList <- data.frame(ID = c(0:(igraph::vcount(gD) - 1)), # because networkD3 library requires IDs to start at 0
nName = igraph::V(gD)$name)
(head(nodeList))
# Map node names from the edge list to node IDs
##which() function gives you the position of elements of a logical vector that are TRUE
## Given any vertex name, its position is a row number which goes to getNodeID
## getNodeID is a function that takes a name and returns a row location -1
getNodeID <- function(x){
which(x == igraph::V(gD)$name) - 1 # to ensure that IDs start at 0
}
(getNodeID("Joly"))
## This returns "2"
# And add them to the edge list
# package plyr is used to perform, split-apply-combine procedures
# ddply is a plyr function that takes a df and variables to retain
## and then a function for adding new variables and data
## Here we use edgeList. We keep variables: SourceName and TargetName and weight
## Then we add on new variables SourceID and TargetID
## The new variables are created by applying a function that takes x
## and returns a df of the Source and Target for that x
(head(edgeList)) #This shows that currently, the vars in edgeList are
## SourceName, TargetName, and Weight
##Next - we keep all three current variables and we add two more
## SourceID  - the node ID for SourceName and
## TargetID - the node ID for Target name
edgeList <- plyr::ddply(edgeList, .variables = c("SourceName", "TargetName" , "Weight"),
function (x) data.frame(SourceID = getNodeID(x$SourceName),
TargetID = getNodeID(x$TargetName)))
(head(edgeList))
# Calculate degree for all nodes
# recall that cbind is column bind
# Node degree: number of links/edges associated with a node/vertex.
# Degree per node: edges entering the node ("in degree"), or exiting the node ("out degree"), or both.
# The degree() function: takes a graph input and returns the degree of specified nodes.
# v = igraph::V(gD): return the degree of all nodes in the graph gD,
# "mode" argument: can be in, out, or all
#(head(nodeList))
nodeList <- cbind(nodeList, nodeDegree=igraph::degree(gD, v = igraph::V(gD), mode = "all"))
# Calculate betweenness for all nodes
#The betweenness value for each node n is normalized
#by dividing by the number of node pairs excluding n: (N-1)(N-2)/2,
# RE: (((igraph::vcount(gD) - 1) * (igraph::vcount(gD)-2)) / 2)
#where N is the total number of nodes in the connected component that n belongs to.
#Thus, the betweenness centrality of each node is a number between 0 and 1.
betAll <- igraph::betweenness(gD, v = igraph::V(gD), directed = FALSE) / (((igraph::vcount(gD) - 1) * (igraph::vcount(gD)-2)) / 2)
betAll.norm <- (betAll - min(betAll))/(max(betAll) - min(betAll))
nodeList <- cbind(nodeList, nodeBetweenness=100*betAll.norm) # We are scaling the value by multiplying it by 100 for visualization purposes only (to create larger nodes)
rm(betAll, betAll.norm)
(head(nodeList))
#Calculate Dice similarities between all pairs of nodes
#The Dice similarity coefficient of two vertices is twice
#the number of common neighbors divided by the sum of the degrees
#of the vertices. Method dice calculates the pairwise Dice similarities
#for some (or all) of the vertices.
dsAll <- igraph::similarity.dice(gD, vids = igraph::V(gD), mode = "all")
(head(dsAll))
#Create  data frame that contains the Dice similarity between any two vertices
F1 <- function(x) {data.frame(diceSim = dsAll[x$SourceID +1, x$TargetID + 1])}
#Place a new column in edgeList with the Dice Sim
(head(edgeList))
edgeList <- plyr::ddply(edgeList, .variables=c("SourceName", "TargetName", "Weight", "SourceID", "TargetID"),
function(x) data.frame(F1(x)))
(head(edgeList))
rm(dsAll, F1, getNodeID, gD)
############################################################################################
# We will also create a set of colors for each edge, based on their dice similarity values
# We'll interpolate edge colors based on using the "colorRampPalette" function, that
# returns a function corresponding to a color palette of "bias" number of elements (in our case, that
# will be a total number of edges, i.e., number of rows in the edgeList data frame)
F2 <- colorRampPalette(c("#FFFF00", "#FF0000"), bias = nrow(edgeList), space = "rgb", interpolate = "linear")
colCodes <- F2(length(unique(edgeList$diceSim)))
edges_col <- sapply(edgeList$diceSim, function(x) colCodes[which(sort(unique(edgeList$diceSim)) == x)])
rm(colCodes, F2)
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 500, # Size of the plot (vertical)
width = 1000,  # Size of the plot (horizontal)
fontSize = 20, # Font size
linkDistance = networkD3::JS("function(d) { return 10*d.value; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value/5; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 0.65, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 0.1, # opacity of labels when static
linkColour = edges_col) # edge colors
# Plot network
D3_network_LM
# Save network as html file
networkD3::saveNetwork(D3_network_LM, "D3_LM_Gates.html", selfcontained = TRUE)
View(edgeList)
View(edgeList)
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 500, # Size of the plot (vertical)
width = 1000,  # Size of the plot (horizontal)
fontSize = 20, # Font size
linkDistance = networkD3::JS("function(d) { return d.value/10; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value/50; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 0.65, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 0.1, # opacity of labels when static
linkColour = edges_col) # edge colors
# Plot network
D3_network_LM
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 500, # Size of the plot (vertical)
width = 1000,  # Size of the plot (horizontal)
fontSize = 20, # Font size
linkDistance = networkD3::JS("function(d) { return d.value/10; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value/200; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 0.65, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 0.1, # opacity of labels when static
linkColour = edges_col) # edge colors
# Plot network
D3_network_LM
# Save network as html file
networkD3::saveNetwork(D3_network_LM, "D3_LM_Gates.html", selfcontained = TRUE)
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 500, # Size of the plot (vertical)
width = 1000,  # Size of the plot (horizontal)
fontSize = 20, # Font size
linkDistance = networkD3::JS("function(d) { return d.value/20; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value/500; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 0.65, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 0.1, # opacity of labels when static
linkColour = edges_col) # edge colors
# Plot network
D3_network_LM
# Save network as html file
networkD3::saveNetwork(D3_network_LM, "D3_LM_Gates.html", selfcontained = TRUE)
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 500, # Size of the plot (vertical)
width = 1000,  # Size of the plot (horizontal)
fontSize = 20, # Font size
linkDistance = networkD3::JS("function(d) { return d.value/80; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value/800; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 0.65, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 0.1, # opacity of labels when static
linkColour = edges_col) # edge colors
# Plot network
D3_network_LM
# Save network as html file
networkD3::saveNetwork(D3_network_LM, "D3_LM_Gates.html", selfcontained = TRUE)
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 500, # Size of the plot (vertical)
width = 500,  # Size of the plot (horizontal)
fontSize = 20, # Font size
linkDistance = networkD3::JS("function(d) { return d.value/80; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value/800; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 0.5, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 0.1, # opacity of labels when static
linkColour = edges_col) # edge colors
# Plot network
D3_network_LM
# Save network as html file
networkD3::saveNetwork(D3_network_LM, "D3_LM_Gates.html", selfcontained = TRUE)
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 500, # Size of the plot (vertical)
width = 500,  # Size of the plot (horizontal)
fontSize = 20, # Font size
linkDistance = networkD3::JS("function(d) { return d.value/80; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value/800; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 0.2, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 0.1, # opacity of labels when static
linkColour = edges_col) # edge colors
# Plot network
D3_network_LM
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 500, # Size of the plot (vertical)
width = 500,  # Size of the plot (horizontal)
fontSize = 20, # Font size
linkDistance = networkD3::JS("function(d) { return d.value/80; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value/800; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 0.8, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 0.1, # opacity of labels when static
linkColour = edges_col) # edge colors
# Plot network
D3_network_LM
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 1000, # Size of the plot (vertical)
width = 51000,  # Size of the plot (horizontal)
fontSize = 20, # Font size
linkDistance = networkD3::JS("function(d) { return d.value/80; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value/800; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 0.8, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 0.1, # opacity of labels when static
linkColour = edges_col) # edge colors
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 1000, # Size of the plot (vertical)
width = 1000,  # Size of the plot (horizontal)
fontSize = 20, # Font size
linkDistance = networkD3::JS("function(d) { return d.value/80; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value/800; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 0.8, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 0.1, # opacity of labels when static
linkColour = edges_col) # edge colors
# Plot network
D3_network_LM
# Save network as html file
networkD3::saveNetwork(D3_network_LM, "D3_LM_Gates.html", selfcontained = TRUE)
D3_network_LM <- networkD3::forceNetwork(Links = edgeList, # data frame that contains info about edges
Nodes = nodeList, # data frame that contains info about nodes
Source = "SourceID", # ID of source node
Target = "TargetID", # ID of target node
Value = "Weight", # value from the edge list (data frame) that will be used to value/weight relationship amongst nodes
NodeID = "nName", # value from the node list (data frame) that contains node description we want to use (e.g., node name)
Nodesize = "nodeBetweenness",  # value from the node list (data frame) that contains value we want to use for a node size
Group = "nodeDegree",  # value from the node list (data frame) that contains value we want to use for node color
height = 1000, # Size of the plot (vertical)
width = 1000,  # Size of the plot (horizontal)
fontSize = 40, # Font size
linkDistance = networkD3::JS("function(d) { return d.value/80; }"), # Function to determine distance between any two nodes, uses variables already defined in forceNetwork function (not variables from a data frame)
linkWidth = networkD3::JS("function(d) { return d.value/800; }"),# Function to determine link/edge thickness, uses variables already defined in forceNetwork function (not variables from a data frame)
opacity = 0.8, # opacity
zoom = TRUE, # ability to zoom when click on the node
opacityNoHover = 0.1, # opacity of labels when static
linkColour = edges_col) # edge colors
# Plot network
D3_network_LM
# Save network as html file
networkD3::saveNetwork(D3_network_LM, "D3_LM_Gates.html", selfcontained = TRUE)
